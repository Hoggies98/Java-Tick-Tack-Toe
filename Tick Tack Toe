import java.util.Scanner;

public class Main {
    private static final int ROWS = 6;
    private static final int COLS = 7;
    private static char[][] board = new char[ROWS][COLS];
    private static char currentPlayer = 'X';

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        initializeBoard();
        boolean gameWon = false;
        int moves = 0;

        while (!gameWon && moves < ROWS * COLS) {
            printBoard();
            System.out.println("Player " + currentPlayer + ", choose a column (0-6):");
            int col = scanner.nextInt();

            if (col < 0 || col >= COLS || board[0][col] != ' ') {
                System.out.println("Invalid move. Try again.");
                continue;
            }

            int row = dropDisc(col);
            moves++;
            gameWon = checkWin(row, col);

            if (!gameWon) {
                currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
            }
        }

        printBoard();
        if (gameWon) {
            System.out.println("Player " + currentPlayer + " wins!");
        } else {
            System.out.println("It's a tie!");
        }
    }

    private static void initializeBoard() {
        for (int i = 0; i < ROWS; i++) {
            for (int j = 0; j < COLS; j++) {
                board[i][j] = ' ';
            }
        }
    }

    private static void printBoard() {
        for (int i = 0; i < ROWS; i++) {
            System.out.print("| ");
            for (int j = 0; j < COLS; j++) {
                System.out.print(board[i][j] + " | ");
            }
            System.out.println();
        }
        System.out.println("-----------------------------");
    }

    private static int dropDisc(int col) {
        for (int i = ROWS - 1; i >= 0; i--) {
            if (board[i][col] == ' ') {
                board[i][col] = currentPlayer;
                return i;
            }
        }
        return -1; 
    }

    private static boolean checkWin(int row, int col) {
        return checkDirection(row, col, 1, 0) || 
               checkDirection(row, col, 0, 1) || 
               checkDirection(row, col, 1, 1) || 
               checkDirection(row, col, 1, -1);
    }

    private static boolean checkDirection(int row, int col, int rowDir, int colDir) {
        int count = 0;
        for (int i = -3; i <= 3; i++) {
            int r = row + i * rowDir;
            int c = col + i * colDir;
            if (r >= 0 && r < ROWS && c >= 0 && c < COLS && board[r][c] == currentPlayer) {
                count++;
                if (count == 4) return true;
            } else {
                count = 0;
            }
        }
        return false;
    }
}
